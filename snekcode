extends Node

@export var snake_scene : PackedScene

var randomStrength : float = 30.0
var shakeFade : float = 5.0

var rng = RandomNumberGenerator.new()
var shake_strength : float = 0.0

var score : int
var celeb_score : int
var game_started : bool = false

var cells : int = 20
var cell_size : int = 50

var old_data : Array
var snake_data : Array
var snake : Array

var food_pos : Vector2
var particle_pos : Vector2
var food_regen : bool = true

var start_pos = Vector2(9,9)
var up = Vector2(0,-1)
var down = Vector2(0,1)
var left = Vector2(-1,0)
var right = Vector2(1,0)
var move_direction : Vector2
var can_move : bool
# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	new_game()
	

func new_game():
	get_tree().paused = false
	get_tree().call_group("Segments", "queue_free")
	$GameOverMenu.hide()
	$BGM.play()
	score = 0
	$Hud.get_node("ScoreLabel").text = "SCORE: " + str(score)
	move_direction = up
	can_move = true
	generate_snake()
	move_food()

func generate_snake():
	old_data.clear()
	snake_data.clear()
	snake.clear()
	for i in range(2):
		add_segment(start_pos + Vector2(0,i))
		
func add_segment(pos):
	snake_data.append(pos)
	var SnakeSegment = snake_scene.instantiate()
	SnakeSegment.position = (pos * cell_size) + Vector2(0, cell_size)
	add_child(SnakeSegment)
	snake.append(SnakeSegment)

# Called every frame. 'delta' is the elapsed time since the previous frame.
@warning_ignore("unused_parameter")
func _process(delta):
	move_snake()
	celebrate()
	
	if shake_strength > 0:
		shake_strength = lerpf(shake_strength,0,shakeFade * delta)
		
		$Camera2D.offset = randomOffset()
		

func randomOffset():
	return Vector2(rng.randf_range(-shake_strength,shake_strength),rng.randf_range(-shake_strength,shake_strength))

func celebrate():
	if celeb_score == 3:
		$YAY.play()
		screen_shake()
		celeb_score = 0

func screen_shake():
	shake_strength = randomStrength


func move_snake():
	if can_move:
		if Input.is_action_just_pressed("Move Down") and move_direction != up:
			move_direction = down
			can_move = false
			if not game_started:
				start_game()
		if Input.is_action_just_pressed("Move Up") and move_direction != down:
			move_direction = up
			can_move = false
			if not game_started:
				start_game()
		if Input.is_action_just_pressed("Move Left") and move_direction != right:
			move_direction = left
			can_move = false
			if not game_started:
				start_game()
		if Input.is_action_just_pressed("Move Right") and move_direction != left:
			move_direction = right
			can_move = false
			if not game_started:
				start_game()

func start_game():
	game_started = true
	$MoveTimer.start()


func _on_move_timer_timeout() -> void:
	can_move = true
	old_data = [] + snake_data
	snake_data[0] += move_direction
	for i in range(len(snake_data)):
		if i > 0:
			snake_data[i] = old_data[i - 1]
		snake[i].position = (snake_data[i] * cell_size) + Vector2(0, cell_size)
	check_out_of_bounds()
	check_self_eaten()
	check_food_eaten()
	
func check_out_of_bounds():
	if snake_data[0].x < 0 or snake_data[0].y < 0 or snake_data[0].x > cells - 1 or snake_data[0].y > cells - 1:
		end_game()
	
	
func check_self_eaten():
	for i in range(1, len(snake_data)):
		if snake_data[0] == snake_data[i]:
			end_game()

func end_game():
	$MoveTimer.stop()
	$GameOverMenu.show()
	$BGM.stop()
	$WOO.stop()
	game_started = false
	get_tree().paused = true
	
func move_food():
	while food_regen:
		food_regen = false
		food_pos = Vector2(randi_range(0, cells - 1), randi_range(0, cells - 1))
		for i in snake_data:
			if food_pos == i:
				food_regen = true
	$Food.position = (food_pos * cell_size) + Vector2(0, cell_size)
	food_regen = true

func check_food_eaten():
	if snake_data[0] == food_pos:
		score += 1
		celeb_score += 1
		$WOO.play()
		$CPUParticles2D.position = (food_pos * cell_size) + Vector2(25, (cell_size + 25))
		$CPUParticles2D.emitting = true
		$Hud.get_node("ScoreLabel").text = "SCORE: " + str(score)
		add_segment(old_data[-1])
		move_food()

func _on_game_over_menu_restart() -> void:
	new_game()
